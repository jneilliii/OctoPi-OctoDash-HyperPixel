name: "CustoPiZe"

on:
  repository_dispatch:
    types: [octoprint_release]
  workflow_dispatch:
    inputs:
      octoprint_version:
        description: "OctoPrint version (leave empty to use latest stable release)"
        required: false
        default: ''

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    steps:

    - name: "⬇ Checkout"
      uses: actions/checkout@v2

    - id: octoprint_latestrelease
      name: 🔎 Get OctoPrint Version
      uses: loeken/github-action-get-latest-release@master
      with:
        repository: OctoPrint/OctoPrint

    - name: 🔎 Get OctoDash version
      id: octodash_version
      uses: loeken/github-action-get-latest-release@master
      with:
        repository: UnchartedBull/OctoDash

    - id: octopi_latestrelease
      name: 🔎 Get OctoPi Version
      uses: loeken/github-action-get-latest-release@master
      with:
        repository: guysoft/OctoPi

    - name: "⬇ Download latest OctoPi"
      id: octopi_download
      run: |
        mkdir build
        cd build
        wget https://octopi.octoprint.org/latest -O octopi.zip
        
        unzip octopi.zip
        rm octopi.zip

        IMAGE=$(ls *.img | head -n 1)
        mv $IMAGE input.img

    - name: "🏗 Run CustoPiZer"
      run: |
        sudo modprobe loop
        docker run --rm --privileged \
          -e OCTOPRINT_VERSION=${{ steps.octoprint_latestrelease.outputs.release }} \
          -v ${{ github.workspace }}/scripts/files/config.local:/CustoPiZer/config.local \
          -v ${{ github.workspace }}/build:/CustoPiZer/workspace \
          -v ${{ github.workspace }}/scripts:/CustoPiZer/workspace/scripts \
          ghcr.io/octoprint/custopizer:latest

    - name: "📦 Package the image"
      run: |
        OCTOPI_VERSION="${{ steps.octopi_latestrelease.outputs.release }}"
        OCTOPRINT_VERSION="${{ steps.octoprint_latestrelease.outputs.release }}"
        
        IMAGE="octopi-$OCTOPI_VERSION-octoprint-$OCTOPRINT_VERSION-octodash-${{ steps.octodash_version.outputs.release }}.img"
        echo "IMAGE=$IMAGE" >> $GITHUB_ENV

        cd build
        mv output.img $IMAGE
        zip $IMAGE.zip $IMAGE
        md5sum $IMAGE.zip > $IMAGE.zip.md5
        sha256sum $IMAGE.zip > $IMAGE.zip.sha256
    
    - name: "📝 Prepare release"
      run: |
        RELEASE_NAME="OctoPi ${{ steps.octopi_latestrelease.outputs.release }} with OctoPrint ${{ steps.octoprint_latestrelease.outputs.release }} and OctoDash ${{ steps.octodash_version.outputs.release }}"
        echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

        RELEASE_TAG="${{ steps.octopi_latestrelease.outputs.release }}.op${{ steps.octoprint_latestrelease.outputs.release }}.od${{ steps.octodash_version.outputs.release }}"
        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV

        RELEASE_BODY=""
        (git rev-parse $RELEASE_TAG >/dev/null 2>&1) || RELEASE_BODY="Created with [CustoPiZer](https://github.com/OctoPrint/CustoPiZer)"

        echo "RELEASE_BODY=$RELEASE_BODY" >> $GITHUB_ENV

    - name: "🔖 Create release & attach assets"
      uses: softprops/action-gh-release@v1
      with:
        name: "${{ env.RELEASE_NAME }}"
        tag_name: "${{ env.RELEASE_TAG }}"
        body: "${{ env.RELEASE_BODY }}"
        prerelease: ${{ contains(steps.octoprint_latestrelease.outputs.release, 'rc') }}
        fail_on_unmatched_files: true
        files: |
          build/${{ env.IMAGE }}.zip
          build/${{ env.IMAGE }}.zip.md5
          build/${{ env.IMAGE }}.zip.sha256
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
